{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "JUDO Specification Language",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#annotations"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#constants-and-special-vars"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.block.empty.jsl",
					"match": "/\\*\\*/",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.jsl"
						}
					}
				},
				{
					"include": "#comments-doc-oldschool"
				},
				{
					"include": "#comments-doc"
				},
				{
					"include": "#comments-inline"
				}
			]
		},
		"comments-doc-oldschool": {
			"patterns": [
				{
					"name": "comment.block.documentation.jsl",
					"begin": "/\\*\\*",
					"end": "\\*/",
					"patterns": [
						{
							"include": "#comments-doc-oldschool"
						},
						{
							"include": "#comments-block"
						},
						{
							"include": "#jsldoc"
						}
					]
				}
			]
		},
		"comments-doc": {
			"patterns": [
				{
					"name": "comment.block.documentation.jsl",
					"begin": "///",
					"while": "^\\s*///",
					"patterns": [
						{
							"include": "#jsldoc"
						}
					]
				}
			]
		},
		"comments-inline": {
			"patterns": [
				{
					"include": "#comments-block"
				},
				{
					"match": "((//).*)$",
					"captures": {
						"1": {
							"name": "comment.line.double-slash.jsl"
						}
					}
				}
			]
		},
		"comments-block": {
			"patterns": [
				{
					"name": "comment.block.jsl",
					"begin": "/\\*",
					"end": "\\*/",
					"patterns": [
						{
							"include": "#comments-block"
						}
					]
				}
			]
		},
		"constants-and-special-vars": {
			"patterns": [
				{
					"name": "constant.language.dart",
					"match": "(true|false|undefined)"
				},
				{
					"name": "variable.language.dart",
					"match": "(self)"
				},
				{
					"name": "constant.numeric.dart",
					"match": "((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)"
				},
				{
					"name": "constant.other.jsl",
					"match": "(RULE_NL|RULE_INTEGER|RULE_DECIMAL|RULE_DIGIT|RULE_STRING|RULE_RAW_STRING|RULE_MIME_TYPE|RULE_DATE)"
				},
				{
					"include": "#class-identifier"
				},
				{
					"include": "#function-identifier"
				}

			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.cast.jsl",
					"match": "as"
				},
				{
					"name": "keyword.control.catch-exception.jsl",
					"match": "(try|on|catch|finally|throw|rethrow)"
				},
				{
					"name": "keyword.control.jsl",
					"match": "(break|case|continue|default|do|else|for|if|in|return|switch|while)"
				},
				{
					"name": "keyword.control.new.jsl",
					"match": "(new)"
				},
				{
					"name": "keyword.declaration.jsl",
					"match": "(abstract|model|enum|extends|error|implies|field)"
				},
				{
					"name": "keyword.operator.ternary.jsl",
					"match": "\\?|:"
				},
				{
					"name": "keyword.operator.bitwise.jsl",
					"match": "(<<|>>>?|~|\\^|\\||&)"
				},
				{
					"name": "keyword.operator.assignment.bitwise.jsl",
					"match": "((&|\\^|\\||<<|>>>?)=)"
				},
				{
					"name": "keyword.operator.closure.jsl",
					"match": "(=>)"
				},
				{
					"name": "keyword.operator.comparison.jsl",
					"match": "(==|!=|<=?|>=?)"
				},
				{
					"name": "keyword.operator.assignment.arithmetic.jsl",
					"match": "(\\+=|\\-=)"
				},
				{
					"name": "keyword.operator.assignment.jsl",
					"match": "(=)"
				},
				{
					"name": "keyword.operator.increment-decrement.jsl",
					"match": "(\\-\\-|\\+\\+)"
				},
				{
					"name": "keyword.operator.arithmetic.jsl",
					"match": "(\\-|\\+|\\*|\\/|)"
				},
				{
					"name": "keyword.operator.logical.jsl",
					"match": "(not|and|or|xor)"
				},
				{
					"name": "storage.modifier.jsl",
					"match": "(static|final|const|required|late)"
				},
				{
					"name": "storage.type.primitive.jsl",
					"match": "(var|relation|type|actor|username|principal|boolean|binary|string|numeric|date|time|timestamp)"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.jsl",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.jsl",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.jsl"
}